第三章 python篇
=================

1.1 全国软件大赛
--------------------

1.1.1 第一次周赛——10.22 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(`第一次周赛网址 <http://182.92.175.181/contest.php?cid=2186>`_)(`第一次周赛补题网址 <http://182.92.175.181/contest.php?cid=2189>`_)


+--------------+-------------------------------------------------------------------------+
| （状态）题号 | 问题 >>> 修正                                                           |
+--------------+-------------------------------------------------------------------------+
| （提交）1    | input，不是inputs >>>> 函数记忆错误                                     |
+--------------+-------------------------------------------------------------------------+
| （提交）2    | 循环里一次输出，最后一次输出，导致了两次输出的错误 >>> 输出只写一次就好 |
+--------------+-------------------------------------------------------------------------+
| （未提交）3  | 格式化输出函数format不熟悉 >>> a = "{:.6f}".format(variable)            |
+--------------+-------------------------------------------------------------------------+

题目C::

    # 第三题：输出格式浪费了很长时间 & 7舍8入不用管，这里是整数，对半开，小数部分只能是0或者5；
    # 但是怎么控制舍入，不知道会不会考，按我自己的逻辑算的7舍8入不对
    w,h,x,y = [int(i) for i in input().split(" ")]
    num = 0
    smax = (w*h)/2

    zhengshu = "{:.6f}".format(smax)

    if x==w/2 and y==h/2:
        num = 1
    print(zhengshu+' '+str(num))

-----------------------------------------------------------------

1.1.2 第一次选拔训练赛——10.25 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(`第一次选拔训练赛网址 <http://182.92.175.181/contest.php?cid=2193>`_,密码yanjiusheng1025，`第一次选拔训练赛补题网址 <http://182.92.175.181/contest.php?cid=2195>`_)


题目A::

    #A**************多行输入，检测到一个输入，就输出一个结果**************************#
     import sys 
     for line in sys.stdin:
         a = line.split(" ")
         print(int(a[0])+int(a[1]))

题目B::

    #B*************输入个数，输入多行，输出多行**********************#
    n = int(input())
    while n>0:
        a,b = [int(i) for i in input().split(" ")]
        print(a+b)
        n -= 1

题目C::

    #C************幂次运算符号记忆错误*****************#
    # 幂次运算符号是两个乘号
    import sys 
    for line in sys.stdin:
        value = int(line[:-1])
        num = [int(i) for i in line[:-1]]
        sum = 0
        for i in range(7):
            sum += num[i] ** 7
        if sum == value:
            print("Y")
        else:
            print("N")

题目D::

    #D***************字符串也是可迭代对象，可以循环取出里面的每一个字符***********#
    sr = input()
    n = int(sr)
    num = [int(i) for i in sr]
    sum = 0
    for i in range(len(num)):
        sum += num[i] ** 3
    if n == sum:
        print("YES")
    else:
        print("NO")

题目E::

    #E*************BUCTOJ做题罚时计算*****************#
    import sys
    for ti_jiao_ci_shu in sys.stdin:
        ti_jiao_ci_shu = int(ti_jiao_ci_shu)
        ti_jiao_time = []
        ti_num = []
        state = []
        count = ti_jiao_ci_shu
        while count > 0:
            info = input().split(" ")
            ti_jiao_time.append(info[0])
            ti_num.append(info[1])
            state.append(info[2])
            count -= 1
        # 找到答案正确的题号
        ac_state_tinum = list(set([ti_num[i] for i in range(ti_jiao_ci_shu) if state[i] == "AC"]))

        # 对每道正确的题计算罚时
        pental = 0
        start_time = 18 * 60 # 按照分钟计算，不用60进制计算时间

        for i in range(len(ac_state_tinum)):
            # 找到该题号正确的时间记录,单位：分钟
            pass_time = [int(ti_jiao_time[j].split(":")[0])*60 + int(ti_jiao_time[j].split(":")[1]) for j in range(ti_jiao_ci_shu) if ti_num[j] == ac_state_tinum[i] and state[j] == "AC"]
            # 找到该题号最早正确的时间,单位：分钟
            pental += min(pass_time) - start_time
            # 在这个时间之前错误提交的罚时
            error_time = [int(ti_jiao_time[j].split(":")[0])*60 + int(ti_jiao_time[j].split(":")[1]) for j in range(ti_jiao_ci_shu) if ti_num[j] == ac_state_tinum[i] and state[j] != "AC"]
            for k in error_time:
                if k < min(pass_time):
                    pental += 20

        # 转换为小时：分钟字符串输出
        hour = int(pental/60)
        minute = pental % 60
        if hour < 10:
            hour_str = "0"+str(hour)
        else:
            hour_str = str(hour)

        if minute < 10:
            minute_str = "0"+str(minute)
        else:
            minute_str = str(minute)
        print(hour_str+":"+minute_str)

题目F::

    #F***********必须改变一个字符能否成为回文串，必须改变 + 判断条件失误*********************#
    n = int(input())
    count = n
    strings = []
    while count > 0:
        strings.append(input())
        count -= 1

    result = []

    for i in range(n):
        str_split = [j for j in strings[i]]
        letter_len = len(str_split)
        pair_num = int(letter_len/2)
        count = 0
        if letter_len == 1:
            result.append('YES')
        else:
            if letter_len % 2 == 0:
                
                for k in range(pair_num):
                    if str_split[k] != str_split[-k-1]:
                        count += 1
                if count == 1:
                    result.append('YES')    
                else:
                    result.append('NO')
            else:
                
                for k in range(pair_num):
                    if str_split[k] != str_split[-k-1]:
                        count += 1
                if count <= 1:
                    result.append('YES')    
                else:
                    result.append('NO')

    for i in range(n):
        print(result[i])

题目G(时间超限)::

    #G************质数，运行超时***************#
    # 质数，倒数第四道，运行超时
    def zs(a):
        count = 0
        for i in range(2,a):
            if a%i == 0:
                count += 1
        if count == 0:
            return "t"
        
    qq_num = int(input())
    for i in range(2,qq_num):
        if zs(i) == "t":
            print(i)

*Reference:*

**参考1：** `素数筛 <https://blog.csdn.net/dy416524/article/details/86431057>`_

题目H::

    #H**************迭代，貌似禁用某某东西,numpy数组越界*******************#
    # import numpy as np
    # import sys
    # for n in sys.stdin:
    #     n = int(n)
    #     f_0 = np.math.sin(n)
    #     for i in range(n):
    #         f_0 = np.math.sin(f_0)
    #     print("{:.6f}".format(f_0))
    
    # 调用python自带的sin，忘记python有自带的怎么调用了，在math包里面，结果正确 #
    import sys
    import math
    for n in sys.stdin:
        n = int(n)
        f_0 = math.sin(n)
        for i in range(n):
            f_0 = math.sin(f_0)
        print("{:.6f}".format(f_0))

题目I(时间超限)::

    #I**************迭代，时间超限*******************#
    # import sys,math
    # for n in sys.stdin:
    #     n = int(n)
    #     f_0 = math.cos(n)
    #     for i in range(n):
    #         f_0 = math.cos(f_0)
    #     print("{:.6f}".format(f_0))

    # 转换为sin,依然时间超限
    # import sys,math
    # for n in sys.stdin:
    #     n = int(n)
    #     f_0 = math.cos(n)
    #     for i in range(n):
    #         f_0 = math.sin(f_0 + math.pi/2)
    #     print("{:.6f}".format(f_0))

题目J::

    #J***********最后一道题，太简单了，错过时间没提交上去************#
    n = int(input())
    count = n
    content = []
    while count > 0:
        content.append([int(i) for i in input().split(" ") ])  
        count -= 1 
        
    for i in content:
        print(sum(i))

---------------------------------------------------------------------------------

1.2 reStructedText语法
------------------------

1.2.1 标题等级
^^^^^^^^^^^^^^^^^

- 最多分6级标题
- 对于相同的符号，有上标是一级标题，没有上标是二级标题。

**Reference**

`参考1 : reStructuredText(rst)快速入门语法说明 <https://regimen.readthedocs.io/zh/latest/books/rst_primer.html>`_

1.2.2 警告及说明
^^^^^^^^^^^^^^^^^^^

1.  Duplicate explicit target name : 
   
    **说明：**
    
    链接目标名字相同
    
    **解决方法：**
    
    - 设置不同的链接名字
    - 使用双下划线的匿名参考
    - 忽略警告

    **双下划线的匿名参考说明**::

        **警告的：**

        $ cat details.rst
        -  `Details <https://github.com/signalfx/integrations/tree/release/collectd>`_
        -  `Details <https://github.com/signalfx/integrations/tree/release/collectd-docker>`_
        -  `Details <https://github.com/signalfx/integrations/tree/release/signalfx-metadata>`_

        $ rst2html.py details.rst > /dev/null
        details.rst:1: (WARNING/2) Duplicate explicit target name: "details".
        details.rst:1: (WARNING/2) Duplicate explicit target name: "details".

        **去警告的：**

        $ cat details.rst
        -  `Details <https://github.com/signalfx/integrations/tree/release/collectd>`__
        -  `Details <https://github.com/signalfx/integrations/tree/release/collectd-docker>`__
        -  `Details <https://github.com/signalfx/integrations/tree/release/signalfx-metadata>`__

        use double underscores ``__`` to make references here!

        $ rst2html.py details.rst > /dev/null
        # => No warnings

    **Reference**：

    `Duplicate explicit target name errors #3921 <https://github.com/sphinx-doc/sphinx/issues/3921>`_
        
1.2.3 图像
^^^^^^^^^^^^^^^^^^^^^

.. warning::

    图像等文件放在source的_static目录下，sphinx在生成网页的时候会自动链接到这里。

::

    插入图像示例：（图像路径，对齐方式，图像标注）
    .. figure::
       images\\机器学习\\DAE.png
       :align: center

       **降噪自编码器原理图**
    
    以上示例中，第二行的路径，如果是相对路径，是当前文档相对于图像文件的相对路径，这个路径有问题的画，图片不会显示。
    图像文件名中包含空格的话，图像显示会有问题，应该需要专门的方法解决。

`插入图像 <https://docutils.sourceforge.io/docs/ref/rst/directives.html#images>`_

1.2.4 链接及跳转
^^^^^^^^^^^^^^^^^^^^^^^^

::

    1. 普通超链接举例：`LZP BLOG <https://longzeping.github.io/2018/08/03/%E5%AE%9E%E7%94%A8reStructuredText%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/>`_
    2. 锚点跳转：首先使用 .. _降噪自编码器原理图:   加上回车换行   来定义锚点，使用  降噪自编码器原理图_   来定义跳转到锚点。
    注意：引用锚点的时候，锚点名称前面需要加空格。
    3.链接到目录中的PDF文档，使用相对位置 放到  一般链接位置的地方即可，例如：
    `Condition Monitoring of Bearing Damage in Electromechanical Drive Systems by Using Motor Current Signals of Electric Motors: A Benchmark Data Set for Data-Driven Classification <Condition Monitoring of Bearing Damage in Electromechanical Drive Systems by Using Motor Current Signals of Electric Motors.pdf>`_

   
1.2.5 数学公式
^^^^^^^^^^^^^^^^^^^^^^^^^^

`reStructuredText Interpreted Text Roles <https://docutils.sourceforge.io/docs/ref/rst/roles.html#standard-roles>`_
reStructuredText 中支持的数学公式使用 LaTeX 语法.

**Interpreted text roles**::

    Interpreted text roles are an extension mechanism for inline markup in reStructuredText. 
    Interpreted text uses backquotes (`) around the text. An explicit role marker may optionally appear 
    before or after the text, delimited with colons. 

    A default role may be defined by applications of reStructuredText; 
    it is used if no explicit :role: prefix or suffix is given. 
    The "default default role" is :title-reference:. 
    It can be changed using the default-role directive.

    A role marker is either a prefix or a suffix to the interpreted text, 
    whichever reads better; it's up to the author
    
    Only pre-determined roles are recognized; unknown roles will generate errors.
    A core set of standard roles is implemented in the reference parser.


.. warning::
    
    **内联公式输入,使用 `` 放入数学公式文本的时候，不要在开头和结尾留空格，会导致不能正确渲染。**

    例如：
        - 在分界符之后使用了一个空格 —— :math:` \alpla`
        - 在分界符之后使用了一个空格 —— :math:` \alpla`
        - 不加空格 —— :math:`\alpha`

reStructedText中的数学公式指令：
    `rst/directives.html#math <https://docutils.sourceforge.io/docs/ref/rst/directives.html#math>`_
    
    ::

        即.. math::  
        指令之后要空一行

1.2.6 代码输出
^^^^^^^^^^^^^^^^^^^^^^^^^^^

`代码输出、外部导入代码 <https://self-contained.github.io/reStructuredText/Advance.html#id2>`_ 

导入代码模板::

   .. literalinclude:: SparseAutoEncoder.py
   :linenos:
   :language: python
   :lines: 0-

1.2.7 引用另一个文件中的数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::
    
    .. include:: 文献阅读笔记\\CvT-Introducing Convolutions to Vision Transformers.rst

.. warning::

    reStructedText的指令双冒号后面一定要有一个空格，否则解析不出来
    
1.3 Python 常见错误
----------------------

1.3.1 None类型错误
^^^^^^^^^^^^^^^^^^^^

列表的extend和append返回值为None，直接extend和append在原始变量上修改
可以使用“+”合并两个列表

::

    错误——inputs_nums = [seq_length].extend(hidden_nums[:-1]) # 每个自编码器的输入维度

    inputs_nums的值为None，不是拓展之后的列表

    正确——inputs_nums = [seq_length] + hidden_nums[:-1] # 每个自编码器的输入维度

1.3.2 Tensorflow搭建keras模型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Model(inputs,outputs)

::

    使用Model(inputs,outputs)函数时，注意inputs要一直不变，outputs要一直变
    （循环叠加相同的层时易出现没有单独留出输入的情况，导致错误）

- TensorFlow的padding——same和valid
  
`TensorFlow中padding卷积的两种方式“SAME”和“VALID” <https://blog.csdn.net/syyyy712/article/details/80272071?utm_source=app&app_version=4.17.2&code=app_1562916241&uLinkId=usr1mkqgl919blen>`_

1.4 Python编程索引集
------------------------

1. 生成目录树，方便快速理解一个项目的文件结构:
   Windows系统：:code:`tree /F "E:\Programming\Python\DesignPattern" > dirtree.txt`,
   其中，:code:`/F`  参数设置显示文件夹和文件的目录结构，:code:`"E:\Programming\Python\DesignPattern"` 是目标文件夹，
   :code:`dirtree.txt` 是最终生成的目录树保存的路径。
   Linux系统： 没有权限安装tree，使用如下的python代码生成目录树：

   **generate tree.py**::

         from pathlib import Path

         tree_str = ''
         def generate_tree(pathname, n=0):
             global tree_str
             if pathname.is_file():
                 tree_str += '    |' * n + '-' * 4 + pathname.name + '\n'
             elif pathname.is_dir():
                 tree_str += '    |' * n + '-' * 4 + \
                     str(pathname.relative_to(pathname.parent)) + '\\' + '\n'
                 for cp in pathname.iterdir():
                     generate_tree(cp, n + 1)

         if __name__ == '__main__':
             path = '/home/u2020200708/SparseAE/DenseSparseAE_L1L2'
             generate_tree(Path(path), 0)
             print(tree_str)
             
2. 使用模型预测一个输入样本的输出，注意 :code:`原始样本形状为（1200，）时，应该使用numpy.reshape变形为带有批量维度的形状，即（1，1200）,否则会报错` 。
   在使用matplotlib.pyplot.plot画图时，注意 :code:`画图x形状为（1，1200）时，应该改为（1200，）`。

3. 计算模型的浮点运算次数和参数量，用于比较模型之间的性能差异。`pytorch计算模型FLOPs和Params <https://zhuanlan.zhihu.com/p/337810633>`_
   pip install ptflops 或者 pip install thop
4. TorchVision `TorchVision <https://zhuanlan.zhihu.com/p/145810572>`_ 
   
   ::
       
       很多基于Pytorch的工具集都非常好用，比如处理自然语言的torchtext，处理音频的torchaudio，以及处理图像视频的torchvision。
       torchvision包含一些常用的数据集、模型、转换函数等等。
       当前版本0.5.0包括图片分类、语义切分、目标识别、实例分割、关键点检测、视频分类等工具。

5. `一个好用的预训练库timm(PyTorch) <https://zhuanlan.zhihu.com/p/377060514>`_ 
   
   ::

       timm is a deep-learning library created by Ross Wightman and is a collection of SOTA computer vision models, 
       layers, utilities, optimizers, schedulers, data-loaders, augmentations 
       and also training/validating scripts with ability to reproduce ImageNet training results.
6. yaml等配置文件，方便管理
7. `PyTorch 70.einops：优雅地操作张量维度 <https://zhuanlan.zhihu.com/p/342675997>`_ 
   通过灵活而强大的张量操作符为你提供易读并可靠的代码。支持 numpy、pytorch、tensorflow 等等。
8. `yacs的使用小记 <https://zhuanlan.zhihu.com/p/366289700>`_
   
   ::

       A simple experiment configuration system for research.
       yacs是作为一个轻量级库创建的，用于定义和管理系统配置，比如那些通常可以在为科学实验设计的软件中找到的配置。
       这些“配置”通常包括用于训练机器学习模型的超参数或可配置模型超参数(如卷积神经网络的深度)等概念。
       由于您正在进行科学研究，所以再现性是最重要的，因此您需要一种可靠的方法来序列化实验配置。
       YACS使用YAML作为一种简单的、人类可读的序列化格式。
       范例是:你的代码+实验E的yacs配置(+外部依赖+硬件+其他讨厌的术语…)=可重复的实验E。
       虽然你不能控制一切，但至少你可以控制你的代码和你的实验配置。

   需要创建CN()这个作为容器来装载我们的参数，这个容器可以嵌套::

        from yacs.config import CfgNode as CN
        __C = CN()
        __C.name = 'test'
        __C.model = CN()  # 嵌套使用
        __C.model.backbone = 'resnet'
        __C.model.depth = 18

        print(__C)  
        '''
        name: test
        model:
            backbone: resnet
            depth: 18
        '''


9.  `PyYAML <https://zhuanlan.zhihu.com/p/42678768>`
    `Python模块之pyyaml <https://zhuanlan.zhihu.com/p/365653069>`_

    简介::

        YAML("Yet Another Markup Language")是一种标记性语言，可读性高，用来表达数据序列化的格式。
        使用缩进表示层级关系，用来写项目配置文件，非常简洁和强大。

10. `OpenCV-Python，计算机视觉开发利器 <https://zhuanlan.zhihu.com/p/49957946>`_
    
    ::

        OpenCV 基于 C++ 编写，但提供了 Python、Ruby、MATLAB 等多种语言接口。
        这对于习惯使用 Python 开发的人工智能从业者来说非常方便。

11. `Django 中文教程 <https://www.w3cschool.cn/django/>`
    
    简介::

        Django是一个可以使Web开发工作愉快并且高效的Web开发框架。
        使用Django，使你能够以最小的代价构建和维护高质量的Web应用。

12. `__future__模块 <https://zhuanlan.zhihu.com/p/32756176>`_ 
13. pytorch中的钩子（Hook）有何作用？
    相当于插件。可以实现一些额外的功能，而又不用修改主体代码。把这些额外功能实现了挂在主代码上，所以叫钩子，很形象。

    钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。
    这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。

14. `博特智能|浅谈Pytorch与Torch的关系 <https://zhuanlan.zhihu.com/p/256411087#:~:text=%E6%88%91%E4%BB%AC%E9%83%BD%E7%9F%A5%E9%81%93Pyt,%E5%B8%B8%E5%AE%B9%E6%98%93%E4%B9%9F%E5%BE%88%E8%88%92%E6%9C%8D%E3%80%82>`_

-------------------------------------------------------------------------

**旧版python语法相关文档**

.. include:: Python编程索引集.mht



1.5 python语法
-----------------------

1. python函数注释说明
   
   .. figure::
      _static\\images\\代码相关\\python函数参数定义说明.png
      :align: center

      **python函数参数定义解释说明示例1**

   .. figure::
      _static\\images\\代码相关\\python函数参数解释说明示例2.png
      :align: center

      **python函数参数定义解释说明示例2**

   .. figure::
      _static\\images\\代码相关\\positional_keyword_params.png
      :align: center

      **函数定义参数类型：位置型和关键词型**

   .. figure::
      _static\\images\\代码相关\\函数定义.png
      :align: center

      **函数定义语法**

::

    单引号内的内容为字符串，原样照搬；
    方框内的内容意思为  可选内容，可有可无；
    专有术语：identifier,expression,parameter,
    FUNCTION DEFINITIONS:

    parameter               ::=    identifier [":" expression]   # 创造参数：唯一标识符必有，关于参数的解释可选
    defparameter            ::=    parameter ["=" expression]    # 参数定义：创造参数 + 参数的赋值assignment表达式可选
    parameter_list_starargs ::=    "*" [parameter] ("," defparameter)* ["," ["**"] parameter]

::

    # 代码示例1
    from typing import List, Tuple, Dict
    def add(a:int, string:str, f:float, b:bool) -> Tuple[List, Tuple, Dict, bool]:
    list1 = list(range(a))
    tup = (string, string, string)
    d = {"a":f}
    bl = b
    return list1, tup, d,bl
    print(add(5,"hhhh", 2.3, False))
    # 结果：([0, 1, 2, 3, 4], ('hhhh', 'hhhh', 'hhhh'), {'a': 2.3}, False)
    ----------------------------------------------------------------------------------------
    # 代码示例2
    from typing import List
    def func(a:int, string:str) -> List[int or str]:
        list1 = []
        list1.append(a)
        list1.append(string)
        return list1

    # 使用or关键字表示多种类型

::

    typing常用的类型：

    int,long,float: 整型,长整形,浮点型;

    bool,str: 布尔型，字符串类型；

    List, Tuple, Dict, Set:列表，元组，字典, 集合;

    Iterable,Iterator:可迭代类型，迭代器类型；

    Generator：生成器类型；



*  在冒号前为参数，冒号 :code:`:` 后为参数类型建议符，对参数进行说明;
*  :code:`->` 后面是返回值的类型建议符；
*  类型建议符并非强制规定和检查，也就是说即使传入的实际参数与建议参数不符，也不会报错。
*  在参数注解后还有=号，表示这个如果没有参数传入时候就会默认后面等号的值（相当于默认参数！！)
*  不论是对参数还是返回值的注释，都是使用 expression来描述，具体expression是什么形式就很多样；
*  this expression will be evaluated when the function definition is executed.当函数定义被执行，这些表达式的值都会被计算估计。
*  If the form “*identifier” is present, it is initialized to a tuple receiving any excess positional parameters, defaulting to the empty tuple.
   If the form “**identifier” is present, it is initialized to a new ordered mapping receiving any excess keyword arguments, defaulting to a new empty mapping of the same type.
*  Parameters after “*” or “*identifier” are keyword-only parameters and may only be passed by keyword arguments.
   Parameters before “/” are positional-only parameters and may only be passed by positional arguments.

*  The type system supports unions, generic types, and a special type named Any which is consistent with (i.e. assignable to and from) all types.
   This latter feature is taken from the idea of gradual typing. 
   Gradual typing and the full type system are explained in PEP 483.

*  类型注释，静态分析static analysis
*  Type hints may be built-in classes (including those defined in standard library or third-party extension modules), abstract base classes, types available in the types module, 
   and user-defined classes (including those defined in the standard library or third-party modules).
*  Annotations must be valid expressions that evaluate without raising exceptions at the time the function is defined
*  In addition to the above, the following special constructs defined below may be used: None, Any, Union, Tuple, Callable, 
   all ABCs and stand-ins for concrete classes exported from typing (e.g. Sequence and Dict), type variables, and type aliases.
*  All newly introduced names used to support features described in following sections (such as Any and Union) are available in the typing module.
*  It is possible to declare the return type of a callable without specifying the call signature by 
   substituting a literal ellipsis (three dots) for the list of arguments
*  Additionally, :code:`Any` is a valid value for every type variable. 

**Reference**：

- `python模块分析之typing <https://www.cnblogs.com/cwp-bg/p/7825729.html>`_
- `PEP 3107 -- Function Annotations <https://www.python.org/dev/peps/pep-3107/>`_
- `function definition <https://docs.python.org/3/reference/compound_stmts.html#function-definitions>`_
- `PEP 526 -- Syntax for Variable Annotations <https://www.python.org/dev/peps/pep-0526>`_
- `acceptable type hints <https://www.python.org/dev/peps/pep-0484/#id15>`_
- `PEP 484 -- Type Hints <https://www.python.org/dev/peps/pep-0484>`_
- `python函数注释,参数后面加冒号:,函数后面的箭头→是什么？ <https://blog.csdn.net/sunt2018/article/details/83022493>`_
- `Python函数参数中的冒号与箭头 <https://www.cnblogs.com/ArsenalfanInECNU/p/10724203.html>`_
- `Python3 函数中类型注解（Function Annotations） <https://blog.csdn.net/yinhui_zhang/article/details/86629045>`_
  
2. python的pep
   “PEP的全称是Python Enhancement Proposals,其中Enhancement是增强改进的意思,Proposals则可译为提案或建议书,所以合起来,比较常见的翻译是Python增强提案或Python改进建议书。”

3. 函数signature
   `python signature函数-对python函数签名的方法详解 <https://blog.csdn.net/weixin_39683241/article/details/109619639>`_ 

4. python中省略号的意思
   `python 中省略号的意思 <https://www.cnblogs.com/zhuyunbk/p/11452921.html>`_

5. 删除文件和文件夹
   
   `使用python删除一个文件或文件夹 <https://www.cnblogs.com/aaronthon/p/9509538.html>`_ 
   
   ::
       
       import os
       os.remove(path)  # path是文件的路径，如果这个路径是一个文件夹，则会抛出OSError的错误，这时需用用rmdir()来删除
       os.rmdir(path)  # path是文件夹路径，注意文件夹需要时空的才能被删除
       os.unlink('F:\新建文本文档.txt')  # unlink的功能和remove一样是删除一个文件，但是删除一个删除一个正在使用的文件会报错。

1.6 pytorch学习
-------------------

.. literalinclude:: pytorch_learn.py
   :linenos:
   :language: python
   :lines: 0-
   
1.7 Java学习
--------------------

.. literalinclude:: BeerSong.java
    :linenos:
    :language: java 
    :lines: 0-

1.8 python对mat数据的处理（matlab，python)(数据处理)
----------------------------------------------------------

.. literalinclude:: mat_data_process.py
    :linenos:
    :language: python 
    :lines: 0-

